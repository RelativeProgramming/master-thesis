// delete all node_modules directories
MATCH (n:Directory) WHERE n.fileName STARTS WITH "/node_modules" DETACH DELETE n

// delete all depends-on relations
MATCH ()-[r:DEPENDS_ON]->() DELETE r

// transitive dependency propagation
MATCH (decl:TS:Module)-[r:DEPENDS_ON]->(trgt:TS:Module)<-[:CONTAINS*]-(trgtParent:Directory)
WHERE NOT (trgtParent)-[:CONTAINS*]->(decl)
CREATE (decl)-[:DEPENDS_ON {cardinality: r.cardinality}]->(trgtParent)

MATCH (srcParent:Directory)-[:CONTAINS*]->(decl)-[r:DEPENDS_ON]->(trgt)
WHERE (NOT (srcParent)-[:CONTAINS*]->(trgt)) AND (trgt:Directory OR trgt:TS:Module)
CREATE (srcParent)-[:DEPENDS_ON {cardinality: r.cardinality}]->(trgt)

// aggregate relations
MATCH (src)-[r:DEPENDS_ON]->(trgt)
WITH src, trgt, collect(r) AS rels, sum(r.cardinality) AS new_cardinality
WHERE size(rels) > 1
SET (rels[0]).cardinality = new_cardinality
WITH src, trgt, rels, new_cardinality
UNWIND range(1,size(rels)-1) AS idx
DELETE rels[idx]

// show directories with many incoming(m as dir)/outgoing(n as dir) dependencies (in src)
MATCH (n:Directory)-[r:DEPENDS_ON]->(m:Directory) 
WHERE n.fileName STARTS WITH "/src" AND m.fileName STARTS WITH "/src"
WITH m as dir, sum(r.cardinality) as s 
WHERE s > 20 
RETURN dir.fileName as Directory, s as Dependencies

// Show directory hierarchy with of all modules containing React Function Components
MATCH (m)-[:CONTAINS*]->(n:Module)-[:DECLARES]->(:React:FunctionComponent) WHERE NOT (m:Project) RETURN *